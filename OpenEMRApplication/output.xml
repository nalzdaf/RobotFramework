<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.2.1 (Python 3.8.3 on win32)" generated="20200715 16:10:41.809" rpa="false">
<suite id="s1" name="Db Tests" source="D:\D o c u m e n t s\H e\Robotframework Training\Robot workspace\OpenEMRApplication\TestCases\db_tests.robot">
<kw name="Connect To Database" library="DatabaseLibrary" type="setup">
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using `dbName`, `dbUsername`, and `dbPassword`.</doc>
<arguments>
<arg>pymysql</arg>
<arg>dbName=test_db</arg>
<arg>dbUsername=root</arg>
<arg>dbPassword=11n451R!</arg>
<arg>dbHost=localhost</arg>
<arg>dbPort=3306</arg>
</arguments>
<msg timestamp="20200715 16:10:42.045" level="INFO">Connecting using : pymysql.connect(db=test_db, user=root, passwd=11n451R!, host=localhost, port=3306, charset=None) </msg>
<status status="PASS" starttime="20200715 16:10:42.029" endtime="20200715 16:10:42.063"></status>
</kw>
<test id="s1-t1" name="Print Variable Test">
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${USERNAME}</arg>
</arguments>
<status status="PASS" starttime="20200715 16:10:42.064" endtime="20200715 16:10:42.065"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${NAMES}[0]</arg>
</arguments>
<status status="PASS" starttime="20200715 16:10:42.066" endtime="20200715 16:10:42.066"></status>
</kw>
<kw name="${name} IN [ @{NAMES} ]" type="for">
<kw name="${name} = Zara" type="foritem">
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${name}</arg>
</arguments>
<status status="PASS" starttime="20200715 16:10:42.067" endtime="20200715 16:10:42.067"></status>
</kw>
<status status="PASS" starttime="20200715 16:10:42.067" endtime="20200715 16:10:42.067"></status>
</kw>
<kw name="${name} = Za'im" type="foritem">
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${name}</arg>
</arguments>
<status status="PASS" starttime="20200715 16:10:42.068" endtime="20200715 16:10:42.068"></status>
</kw>
<status status="PASS" starttime="20200715 16:10:42.068" endtime="20200715 16:10:42.068"></status>
</kw>
<kw name="${name} = Zihni" type="foritem">
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${name}</arg>
</arguments>
<status status="PASS" starttime="20200715 16:10:42.068" endtime="20200715 16:10:42.068"></status>
</kw>
<status status="PASS" starttime="20200715 16:10:42.068" endtime="20200715 16:10:42.069"></status>
</kw>
<status status="PASS" starttime="20200715 16:10:42.067" endtime="20200715 16:10:42.069"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${CREDENTIALS}[username]</arg>
</arguments>
<status status="PASS" starttime="20200715 16:10:42.069" endtime="20200715 16:10:42.069"></status>
</kw>
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${CREDENTIALS}</arg>
</arguments>
<assign>
<var>${keys}</var>
</assign>
<msg timestamp="20200715 16:10:42.070" level="INFO">${keys} = ['password', 'username']</msg>
<status status="PASS" starttime="20200715 16:10:42.070" endtime="20200715 16:10:42.070"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>1. ${keys}</arg>
</arguments>
<status status="PASS" starttime="20200715 16:10:42.070" endtime="20200715 16:10:42.070"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>2. ${CREDENTIALS}${keys}</arg>
</arguments>
<status status="PASS" starttime="20200715 16:10:42.071" endtime="20200715 16:10:42.071"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>3. ${CREDENTIALS}</arg>
</arguments>
<status status="PASS" starttime="20200715 16:10:42.072" endtime="20200715 16:10:42.072"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>4. ${CREDENTIALS2}</arg>
</arguments>
<status status="PASS" starttime="20200715 16:10:42.072" endtime="20200715 16:10:42.072"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>5. ${CREDENTIALS2}</arg>
</arguments>
<status status="PASS" starttime="20200715 16:10:42.074" endtime="20200715 16:10:42.074"></status>
</kw>
<status status="PASS" starttime="20200715 16:10:42.064" endtime="20200715 16:10:42.075" critical="yes"></status>
</test>
<test id="s1-t2" name="Check Database">
<kw name="Check If Exists In Database" library="DatabaseLibrary">
<doc>Check if any row would be returned by given the input `selectStatement`. If there are no results, then this will
throw an AssertionError. Set optional input `sansTran` to True to run command without an explicit transaction
commit or rollback.</doc>
<arguments>
<arg>SELECT * FROM country WHERE code = 'afl'</arg>
</arguments>
<msg timestamp="20200715 16:10:42.076" level="INFO">Executing : Check If Exists In Database  |  SELECT * FROM country WHERE code = 'afl' </msg>
<msg timestamp="20200715 16:10:42.076" level="INFO">Executing : Query  |  SELECT * FROM country WHERE code = 'afl' </msg>
<status status="PASS" starttime="20200715 16:10:42.076" endtime="20200715 16:10:42.077"></status>
</kw>
<status status="PASS" starttime="20200715 16:10:42.076" endtime="20200715 16:10:42.078" critical="yes"></status>
</test>
<test id="s1-t3" name="Row Count">
<kw name="Row Count Is 0" library="DatabaseLibrary">
<doc>Check if any rows are returned from the submitted `selectStatement`. If there are, then this will throw an
AssertionError. Set optional input `sansTran` to True to run command without an explicit transaction commit or
rollback.</doc>
<arguments>
<arg>SELECT * FROM country WHERE 1=2</arg>
</arguments>
<msg timestamp="20200715 16:10:42.079" level="INFO">Executing : Row Count Is 0  |  SELECT * FROM country WHERE 1=2 </msg>
<msg timestamp="20200715 16:10:42.079" level="INFO">Executing : Row Count  |  SELECT * FROM country WHERE 1=2 </msg>
<status status="PASS" starttime="20200715 16:10:42.079" endtime="20200715 16:10:42.080"></status>
</kw>
<kw name="Row Count Is Equal To X" library="DatabaseLibrary">
<doc>Check if the number of rows returned from `selectStatement` is equal to the value submitted. If not, then this
will throw an AssertionError. Set optional input `sansTran` to True to run command without an explicit
transaction commit or rollback.</doc>
<arguments>
<arg>SELECT * FROM country</arg>
<arg>239</arg>
</arguments>
<msg timestamp="20200715 16:10:42.080" level="INFO">Executing : Row Count Is Equal To X  |  SELECT * FROM country  |  239 </msg>
<msg timestamp="20200715 16:10:42.080" level="INFO">Executing : Row Count  |  SELECT * FROM country </msg>
<status status="PASS" starttime="20200715 16:10:42.080" endtime="20200715 16:10:42.089"></status>
</kw>
<kw name="Row Count Is Greater Than X" library="DatabaseLibrary">
<doc>Check if the number of rows returned from `selectStatement` is greater than the value submitted. If not, then
this will throw an AssertionError. Set optional input `sansTran` to True to run command without an explicit
transaction commit or rollback.</doc>
<arguments>
<arg>SELECT * FROM country</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200715 16:10:42.089" level="INFO">Executing : Row Count Is Greater Than X  |  SELECT * FROM country  |  200 </msg>
<msg timestamp="20200715 16:10:42.089" level="INFO">Executing : Row Count  |  SELECT * FROM country </msg>
<status status="PASS" starttime="20200715 16:10:42.089" endtime="20200715 16:10:42.098"></status>
</kw>
<kw name="Row Count Is Less Than X" library="DatabaseLibrary">
<doc>Check if the number of rows returned from `selectStatement` is less than the value submitted. If not, then this
will throw an AssertionError. Set optional input `sansTran` to True to run command without an explicit
transaction commit or rollback.</doc>
<arguments>
<arg>SELECT * FROM country</arg>
<arg>300</arg>
</arguments>
<msg timestamp="20200715 16:10:42.098" level="INFO">Executing : Row Count Is Less Than X  |  SELECT * FROM country  |  300 </msg>
<msg timestamp="20200715 16:10:42.098" level="INFO">Executing : Row Count  |  SELECT * FROM country </msg>
<status status="PASS" starttime="20200715 16:10:42.098" endtime="20200715 16:10:42.107"></status>
</kw>
<status status="PASS" starttime="20200715 16:10:42.078" endtime="20200715 16:10:42.107" critical="yes"></status>
</test>
<test id="s1-t4" name="Get Queries">
<kw name="Row Count" library="DatabaseLibrary">
<doc>Uses the input `selectStatement` to query the database and returns the number of rows from the query. Set
optional input `sansTran` to True to run command without an explicit transaction commit or rollback.</doc>
<arguments>
<arg>SELECT * FROM country</arg>
</arguments>
<assign>
<var>${rowcount}</var>
</assign>
<msg timestamp="20200715 16:10:42.109" level="INFO">Executing : Row Count  |  SELECT * FROM country </msg>
<msg timestamp="20200715 16:10:42.119" level="INFO">${rowcount} = 239</msg>
<status status="PASS" starttime="20200715 16:10:42.109" endtime="20200715 16:10:42.119"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${rowcount}</arg>
</arguments>
<status status="PASS" starttime="20200715 16:10:42.119" endtime="20200715 16:10:42.119"></status>
</kw>
<kw name="Query" library="DatabaseLibrary">
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<arguments>
<arg>SELECT code, name FROM country WHERE code = 'ATA'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20200715 16:10:42.120" level="INFO">Executing : Query  |  SELECT code, name FROM country WHERE code = 'ATA' </msg>
<msg timestamp="20200715 16:10:42.121" level="INFO">${result} = (('ATA', 'Antarctica'),)</msg>
<status status="PASS" starttime="20200715 16:10:42.120" endtime="20200715 16:10:42.121"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" starttime="20200715 16:10:42.121" endtime="20200715 16:10:42.121"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${result}[0]</arg>
</arguments>
<status status="PASS" starttime="20200715 16:10:42.122" endtime="20200715 16:10:42.122"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${result}[0][1]</arg>
</arguments>
<status status="PASS" starttime="20200715 16:10:42.123" endtime="20200715 16:10:42.123"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${result}[0][1] , ${result}[0][0]</arg>
</arguments>
<status status="PASS" starttime="20200715 16:10:42.124" endtime="20200715 16:10:42.124"></status>
</kw>
<status status="PASS" starttime="20200715 16:10:42.109" endtime="20200715 16:10:42.125" critical="yes"></status>
</test>
<kw name="Disconnect From Database" library="DatabaseLibrary" type="teardown">
<doc>Disconnects from the database.</doc>
<msg timestamp="20200715 16:10:42.126" level="INFO">Executing : Disconnect From Database</msg>
<status status="PASS" starttime="20200715 16:10:42.126" endtime="20200715 16:10:42.127"></status>
</kw>
<doc>Checking database</doc>
<status status="PASS" starttime="20200715 16:10:41.811" endtime="20200715 16:10:42.127"></status>
</suite>
<statistics>
<total>
<stat pass="4" fail="0">Critical Tests</stat>
<stat pass="4" fail="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="4" fail="0" id="s1" name="Db Tests">Db Tests</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
